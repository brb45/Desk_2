initial:  10/31/19
Review: 
1. 1/3/2020
2. 4/12/20


@*************************************

#@@ 1.
docker info
docker ps
docker build
docker images
docker push

docker-compose build release

Access a Remote Server: ssh
ssh username@ip_add
ssh username@192.168.100.2
ssh username@hostname

By Default: ssh server listens at port 22
connect remotely with custom port number: -p
ssh username@hostname -p 3322

Generate public key from client side:
ssh-keygen -t rsa
public key generated: id_rsa_pub

# Copy pub.key to ssh server:
ssh-copy-id hostname_or_serverIP

Copy a file to server remotely: scp
scp client_filename user@serverIP:/home/username/server_destination -P 6564

#Copy file from remote to client
scp user@host:file_server client_path

# Copy dir
scp -r user@host:path/server_dir client/dir

# Edit server ssh config file
sudo vim /etc/ssh/sshd_config
sudo ssh service restart

Remotely execute a command from client
ssh user@serverIP rm -r ~/Desktop/Dir1/
sshd : open ssh server
 
> ssh -i ~/.ssh/admin.pem ec2-user@34.201.120.79
The authenticity of host '34.201.120.79 (34.201.120.79)' can't be established.
ECDSA key fingerprint is SHA256:c/MniTAq931tJj8bCVtRUP9gixM/ZXZSqDuMENqpod0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '34.201.120.79' (ECDSA) to the list of known hosts.

   __| __| __|
   _| ( \__ \ Amazon ECS-Optimized Amazon Linux AMI 2017.09.g
 ____|\___|____/

For documentation visit, http://aws.amazon.com/documentation/ecs
5 package(s) needed for security, out of 7 available
Run "sudo yum update" to apply all updates.

#@@  2.
> docker info
Containers: 1
 Running: 1
 Paused: 0
 Stopped: 0
Images: 2
Server Version: 17.09.1-ce
Storage Driver: devicemapper
 Pool Name: docker-docker--pool
 Pool Blocksize: 524.3kB
 Base Device Size: 10.74GB
 Backing Filesystem: ext4

#@@ 3. 
> docker ps
CONTAINER ID   IMAGE                            COMMAND    CREATED          STATUS          NAMES
a1b1a89b5e9e   amazon/amazon-ecs-agent:latest   "/agent"   36 minutes ago   Up 36 minutes   ecs-agent

#@@ 4. Inspect ecs.agent
> docker container inspect ecs-agent --format '{{json .HostConfig.Binds}}' | jq
[
  "/var/run:/var/run",
  "/var/log/ecs:/log",
  "/var/lib/ecs/data:/data",
  "/etc/ecs:/etc/ecs",
  "/var/cache/ecs:/var/cache/ecs",
  "/cgroup:/sys/fs/cgroup",
  "/proc:/host/proc:ro",
  "/var/lib/ecs/dhclient:/var/lib/dhclient",
  "/lib64:/lib64:ro",
  "/sbin:/sbin:ro"
]

#@@ 5. Verify ecs.agent
> curl -s localhost:51678 | jq
{
  "AvailableCommands": [
    "/v1/metadata",
    "/v1/tasks",  # currently running test
    "/license"  # sw 
  ]
}
> curl -s localhost:51678/v1/metadata | jq
{
  "Cluster": "test-cluster",
  "ContainerInstanceArn": "arn:aws:ecs:us-east-1:385605022855:container-instance/f67cbfbd-1497-47c0-b56c-a910c923ba70",
  "Version": "Amazon ECS Agent - v1.16.2 (998c9b5)"
}

#@@ 6. ECS  container  instance log
The primary logs you will work with include the following:
Docker Engine logs: Located at /var/log/docker
ECS Agent logs: Located at /var/log/ecs

Note that there are two types of ECS agent logs:
1. Init logs: Located at /var/log/ecs/ecs-init.log, 
these logs provide output related to the ecs-init service, 
which is an Upstart service that ensures the ECS agent is running on container instance startup.
2. Agent logs: Located at /var/log/ecs/ecs-agent.log.*, 
these logs provide output related to ECS agent operation. 
These logs are the most common logs you will inspect for any ECS agent related issues.

#@@ 7. ECS task definition: defines the configuration of the containers you want to deploy for your application

#@@ 9.
1) We have created an ECS cluster.
2) configured an ECS task definition that includes a single container
 running Nginx with an appropriate port mapping configuration 
to expose the Nginx web server to the outside world.
3) Define an ECS service
An ECS service configure ECS to deploy one or more instances of our ECS task definition to our ECS cluster. 
ECS services deploy a given ECS task definition to a given ECS cluster, 
allowing you to configure how many instances (ECS tasks) of the referenced ECS task definition 
you would like to run, and controlling more advanced features, 
such as load balancer integration and rolling updates of your application.

#@@ 11.
core components that make up ECS. 
You learned how ECS clusters are a collection of ECS container instances, 
which run the Docker Engine atop EC2 autoscaling group instances. 
AWS provide you with a pre-built ECS-optimized AMI, making it very easy to get up and running quickly with ECS. 
Each ECS container instance includes an ECS agent, which runs as a system container and communicates with ECS, 
providing the management and control plane required to start, stop, and deploy your containers.

You next created an ECS task definition, which defines a collection of one or more container and volume definitions, 
including information such as container image, environment variables, and CPU/memory resource allocations. 
With your ECS cluster and ECS task definition in place, you were then able to create and configure an ECS service, 
referencing the ECS task definition to define the container configuration for the ECS service, 
and targeting one or more instances of your ECS service to your ECS cluster.

#@@ 12.
Docker registries are a critical component of the Docker and container ecosystem, providing a universal 
mechanism to publish and distribute your container applications, both publicly and privately.

#@@ 13.
Docker 18.06 or higher
Docker Compose 1.22 or higher
GNU Make 3.82 or higher
jq
AWS CLI 1.15.71 or higher
Administrator access to an AWS account
Local AWS profile configured as per instructions
Working Docker workflow for the sample application 

#@@ 14.
ECR repository. 
Build a todobackend application Docker image in your local environment. 
To be able to run containers on your ECS clusters based from this image, 
need to publish this image to a Docker registry that your ECS container instances can access, 
and ECR is the perfect solution for this.

To create an ECR repository for the todobackend application, we will focus on the three 
popular methods to create and configure your repositories:

Creating ECR repositories using the AWS Console
Creating ECR repositories using the AWS CLI
Creating ECR repositories using the AWS CloudFormation
 
#@@ 15.
Publishing Docker images to ECR
Build and tag Docker images locally with the todobackend application.

You can now extend this workflow to publish Docker images to ECR:

1. Ensure you are logged into ECR
2. Build and tag your Docker image with the URI of your ECR repository
3. Push your Docker image to ECR

#@@ 16.
Publishing Docker images using the Docker CLI
You've already seen how to log into ECR, and building and tagging your Docker image is 
much the same as the local use case, 
except you need to specify the URI of your ECR repository when tagging the image.

#@@ 17.
1) building the todobackend image 
2) tagging the image with the URI of your new ECR repository 
(for the actual URI of your repository)
3) verifying the image name using the docker images command: docker images

#@@ 18.
# 1. login ecr repository
> aws ecr get-login --no-include-email

> cd ../todobackend

# 2. Build the image
# use our own Docker file to build the image and tag the image -t
> docker build -t 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend .
Sending build context to Docker daemon 129.5kB
Step 1/25 : FROM alpine AS build
 ---> 3fd9065eaf02
Step 2/25 : LABEL application=todobackend
 ---> Using cache
 ---> f955808a07fd
...
...
...
Step 25/25 : USER app
 ---> Running in 4cf3fcab97c9
Removing intermediate container 4cf3fcab97c9
---> 2b2d8d17367c
Successfully built 2b2d8d17367c
Successfully tagged 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest

> docker images
REPOSITORY                                                             TAG    IMAGE ID     SIZE 
385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend latest 2b2d8d17367c 99.4MB

# 3. push image to ECR
logged into ECR, docker push command and referencing the name of your Docker image:

> docker push 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
The push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend]
1cdf73b07ed7: Pushed
0dfffc4aa16e: Pushed
baaced0ec8f8: Pushed
e3b27097ac3f: Pushed
3a29354c4bcc: Pushed
a031167f960b: Pushed
cd7100a72410: Pushed
latest: digest: sha256:322c8b378dd90b3a1a6dc8553baf03b4eb13ebafcc926d9d87c010f08e0339fa size: 1787

image pushed to ECR: sha256:322c8b378dd90b3a1a6dc8553baf03b4eb13ebafcc926d9d87c010f08e0339fa
#@@ 19
> docker-compose build release
WARNING: The APP_VERSION variable is not set. Defaulting to a blank string.
Building release
Step 1/25 : FROM alpine AS build
 ---> 3fd9065eaf02
Step 2/25 : LABEL application=todobackend
 ---> Using cache
 ---> f955808a07fd
...
...
Step 25/25 : USER app
 ---> Using cache
 ---> f507b981227f

Successfully built f507b981227f
Successfully tagged 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest

> docker-compose push release
Pushing release (385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest)...
The push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend]
9ae8d6169643: Layer already exists
cdbc5d8be7d1: Pushed
08a1fb32c580: Layer already exists
2e3946df4029: Pushed
3a29354c4bcc: Layer already exists
a031167f960b: Layer already exists
cd7100a72410: Layer already exists
latest: digest: sha256:a1b029d347a2fabd3f58d177dcbbcd88066dc54ccdc15adad46c12ceac450378
