2018-02-10 18:33:52,527 - DEBUG- End
2018-02-10 18:33:52,527 - INFO- The log
2018-02-10 18:33:52,527 - WARNING- An
2018-02-10 18:33:52,527 - ERROR- An err.


End of the first write
2018-02-10 18:33:52,527 - DEBUG- End
2018-02-10 18:33:52,527 - INFO- The log
2018-02-10 18:33:52,527 - WARNING- An
2018-02-10 18:33:52,527 - ERROR- An err.
2018-02-10 18:33:52,527 - DEBUG- End
2018-02-10 18:33:52,527 - INFO- The log
2018-02-10 18:33:52,527 - WARNING- An
2018-02-10 18:33:52,527 - ERROR- An err.


End of the first write2018-02-10 18:33:52,527 - DEBUG- End
2018-02-10 18:33:52,527 - INFO- The log
2018-02-10 18:33:52,527 - WARNING- An
2018-02-10 18:33:52,527 - ERROR- An err.

#@@ 10/14 pure-storage
# print("Hello World")
# def output():
#     print("Hello World")
# output()

# stdin is a string that might be the content of a CSV file. We want to know the average value from each column.
# In this example, the first column contains the values 1, 1, and 7, and the average is (1 + 1 + 7) / 3, which is 3.
# Similarly, the second and third columns have averages of 2 and 4.
# Write a function that takes a string like this and calculates the average value in each column, returning a list or array.
# For this data, your function should return a [3, 2, 4].

import sys

def line_avg(s):
    
    # s_line = s.splitlines()
    # rst = []
    
    # for line in s_line:
    #     line =line.split(',')
    #     sum = 0
    #     for i in line:
    #         sum+= int(i)
    #     avg_line = sum / len(line)
    #     rst.append(avg_line)
        
    # for i in rst:
    #     print(i)
    
    s_line = s.splitlines()
    rst = []
    matrix = []
    
    for line in s_line:
        line =line.split(',')
        for i in range(len(line)):
            temp = line[i]
            if temp.isdigit():
                line[i] = int(temp)
            else:
                line[i] = None
        matrix.append(line)
        
    m = len(line)
    
    # for i in range(m):
    #     for j in range(m):
    #         print(matrix[i][j])
    
    for i in range(m):
        sum = 0
        cnt = 0
        for j in range(m):
            if matrix[j][i] is not None:
                sum += matrix[j][i]
                cnt += 1
        avg = sum / cnt
        rst.append(avg)
    
    for i in rst:
        print(i)
            
    
# ss = '1,3,\n'
# ss = ss.splitlines()
# ss = ss[0].split(',')
# print(len(ss), ss)
    
    #"" ,3,4\n
    # 2,,4\n
    # 5,6,\n
    
    # 3.5, 4.5, 4


line_avg(sys.stdin.read())

#@@ 10_7 equinix
'''
1. UI(front-end) -->  API. --> backend (micro-services) --> DB
    a. UI  Selenium -- components -> selector(css id name) -> values() / event 
    b. APIs   Http Methods GET POST PUT DEL
        b1. GET vs POST  
            GET Read    
            POST action creation
                GET w/ params 
                cached
                length restrictions
                bookmarked
                should never be used when dealing with sensitive data => GET
        b2. Http status code
            200 OK 201 created 
            400 bad req  401 auth issues 404 not found  403 forbidden
            500 .  no response from server . 503 
            bad things happened from server / Intenal server error => 500
            
    c. backend ()
        c1.  Functional and non-functional tests
            Unit testing | Smoke testing | 
            
            Performance Testing | Volume Testing
    d. DB
        Expection
            d1. access 
-----------------------------------------            

Reverse only capital case in a string: 

asfAbB        =>    asfBbA
abAkmBCc      =>    abCkmBAc
abAmBkCnnD     =>    abDmCkBnnA
ABC            =>      CBA          
            
test case: 
    1. type chcck ()
    2. null check
    3. max length
    4. numbers of capital letters (0)
    5. rever naming duplicate 
'''
def rever(s):
    
    ss = list(s)
    
    start, end = 0, len(s)-1
    
    while start <= end:
        if ss[start].islower():
            start += 1
            continue
        if ss[end].islower():
            end -= 1
            continue
        
        if start <= end:
            temp = ss[start]
            ss[start] = ss[end]
            ss[end] = temp
            
            start += 1
            end -= 1
        
    rst = ""
    
    # for i in ss:
        
    
    return str("".join(ss))

s = "asfAbB"
print(rever(s))

tt = ["abAkmBCc", "abAmBkCnnD","ABC"]

for t in tt:
    print(rever(t))