## Command substitution
cd /lib/modules/`uname -r`
# same as
cd /lib/modules/$(uname --r)


/bin/sh
/bin/bash

cd /etc/init.d

# status of last command
echo $? 

#
$PATH


#Create a sub-shell
bash

##
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ COLOR=red
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo $COLOR
red
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ export COLOR
#create a subshell
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ bash
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo $COLOR
red
# Return to parent shell
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ exit
exit

#####
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ bash -x script1 
+ clear
+ echo 'hello world'
hello world
+ echo hello planet
hello planet
+ exit 0

##A variable is effective only in the shell where is was defined
# Use export to make it available in subshells
# There is no way to make variables available in parent shells


##

#!/bin/bash
#showing variable use between shells

echo which directory do you want to activate 
read DIR

cd $DIR
pwd
ls -l

exit 0

##

litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ bash -x script2
+ echo which directory do you want to activate
which directory do you want to activate
+ read DIR
/home/litepoint/Desktop
+ cd /home/litepoint/Desktop
+ pwd
/home/litepoint/Desktop
+ ls -l
total 24
drwxr-xr-x 5 litepoint litepoint 4096 Jun  4 09:19 Docker_files
drwxr-xr-x 3 litepoint litepoint 4096 Jun  5 09:22 docker_subreddit_fetcher
drwxr-xr-x 9 litepoint litepoint 4096 Jun  5 08:29 practical_docker
-rw-r--r-- 1 litepoint litepoint    0 Jun  2 21:26 re.txt
drwxr-xr-x 2 litepoint litepoint 4096 Jun 14 23:12 Shell_script
-rw-r--r-- 1 litepoint litepoint  922 Jun 14 23:09 shell_st.txt
drwxrwxr-x 2 litepoint litepoint 4096 Mar  5 07:48 test

## By using sourcing, the content of one script can be included in another script
## use the source command or . command to source script
## Do not use exit at the end of a script that needs to be sourced.

litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ cat sourceme 
COLOR=Yellow

litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ cat masterScript 
#!/bin/bash
#example showing how sourcing works

. /home/litepoint/Desktop/Shell_script/sourceme
echo the value of the variable "$COLOR" is  $COLOR

exit 0

##
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ bash -x masterScript 
+ . /home/litepoint/Desktop/Shell_script/sourceme
++ COLOR=Yellow
+ echo the value of the variable Yellow is Yellow
the value of the variable Yellow is Yellow
+ exit 0



# double quote is weak, allow parameter substitution, command substitution, and arithmetic evaluation.

# Best practice, use single quotes.

#Command Substitution 
$(command)

#
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ which passwd
/usr/bin/passwd
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ ls -l $(which passwd)
-rwsr-xr-x 1 root root 59640 Mar 22 12:05 /usr/bin/passwd

#source.06-15-19
!/bin/bash
#comand substitution

cp ~/Desktop/Shell_script/sourceme ./source.$(date +%m-%d-%y)

echo sourceme copied
#create a new file with new date
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ touch ./newfile-$(date +%d-%m-%y)
newfile-15-06-19 

#Substitution Operator
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ DATE=
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo $DATE

litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo ${DATE:-today}
today
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo $DATE

litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo ${DATE:=today}
today
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo $DATE
today

##
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ DATE=
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ DATE=$(date +%d-%m-%y)
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo the day is ${DATE:0:4}
the day is 15-0
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo the day is ${DATE:0:8}
the day is 15-06-19
##${VAR#pattern} delete the shortest part that matches
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ FILENAME=/usr/bin/blah
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo ${FILENAME#*/}
usr/bin/blah
##${VAR##patern} delete the longest part that matches
##
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ FILENAME=/usr/bin/blah
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo ${FILENAME##*/}
blah
##
#!/bin/bash

BLAH=rababarabarabarara

echo BLAH  is $BLAH
echo 'The result of ##*ba is ' ${BLAH##*ba}
echo 'The result of #*ba is '  ${BLAH#*ba}
echo 'The result of %%ba* is ' ${BLAH%%ba*}
echo 'The result of %ba* is '  ${BLAH%ba*}


##
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ bash -x paternTest 
+ BLAH=rababarabarabarara
+ echo BLAH is rababarabarabarara
BLAH is rababarabarabarara
+ echo 'The result of ##*ba is ' rara
The result of ##*ba is  rara
+ echo 'The result of #*ba is ' barabarabarara
The result of #*ba is  barabarabarara
+ echo 'The result of %%ba* is ' ra
The result of %%ba* is  ra
+ echo 'The result of %ba* is ' rababarabara
The result of %ba* is  rababarabara


##Regular expressions: grep and other text processing utilities: awk, sed

^text : Line starts with text
text$ : Line ends with text
.     : wildcare, match any single character
[abc], [a-c]: Matches a, b or c
*     : match 0 to any number of previous character
\{2\} : match exactly 2 of the previous character
\{1,3\} : match a minimum of 1 and max of 3 previous characters
?      : match 0 or 1 previous char

## Calculation
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo $((1+1))
2
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo $((5*10-1))
49
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo "scale=3; 7/5" | bc
1.400
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo "scale=3; 8/7" | bc
1.142
##
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ NUMBER=$(echo "scale=0; 8/2" | bc)
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo $NUMBER
4
## comand
test, cut, sort

##
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ head -5 /etc/passwd | tail -1

## sed
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ sed -n 5p /etc/passwd
sync:x:4:65534:sync:/bin:/bin/sync
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ head -5 /etc/passwd | tail -1
sync:x:4:65534:sync:/bin:/bin/sync

# awk
# tr

#
if expression
then 
	statements
fi

#
if expression
then
	statements
elif expression
then
	statements
else
	statements
fi
#

##
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ ./if_test ~/Desktop/Shell_script/sourceme 
/home/litepoint/Desktop/Shell_script/sourceme is a file
##

##
#!/bin/bash

if [ -d $1 ]
then
        echo $1 is a directory
elif [ -f $1 ]
then
        echo $1 is a file
else
        echo $1 is not a file or a directory
fi
##
&&, ||

## for
for i in something
do
	statements
done
##
## case
## while

#options:  

#functions

# arrays
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ arr=(wifi, ac, bt, ax)
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo $arr
wifi,
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo $arr[1]
wifi,[1]
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo ${arr[1]}
ac,
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo ${arr[@]}
wifi, ac, bt, ax
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ echo arr size is ${#arr[@]}
arr size is 4

##Menu interfaces
#select
#!/bin/bash
# sample admin menu

echo 'select a task: '
select TASK in 'Check mounts' 'Check disk space' 'Check Memory Usage'
do
        case $REPLY in
                1) TASK=mount;;
                2) TASK="df -h";;
                3) TASK="free -m";;
                *) echo ERROR && exit 2;;
        esac
        if [ -n "$TASK" ]
        then
                clear
                $TASK
                break
        else
                echo INVALID CHOICE && 3
        fi
done
##
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ ./select_admin_menu 
select a task: 
1) Check mounts
2) Check disk space
3) Check Memory Usage
#? 3

              total        used        free      shared  buff/cache   available
Mem:           7882         980        4417         222        2484        6383
Swap:          2047           0        2047
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script$ 

## trap

bash -v  # show verbose output
bash -x  # show xtrace information
bash -n  # check syntax errors

# CPU usage
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script/script_examples$ ps -eo pcpu,pid -o comm= | sort -k1 -n -r | head -10
 0.5  1165 gnome-shell
%CPU   PID 
 0.0     9 ksoftirqd/0
 0.0   997 gnome-session-b
 0.0   990 dbus-daemon
 0.0   988 gdm-wayland-ses
 0.0   984 gnome-keyring-d
 0.0   930 (sd-pam)
 0.0   929 systemd
 0.0     8 mm_percpu_wq

#
#!/bin/bash
INTERVAL=$1

while sleep $INTERVAL
do
        VALUE=$(ps -eo pcpu,pid -o comm= | sort -k1 -n -r | head -1)
        USAGE=$(echo $VALUE | awk '{ print $1 }')
        echo $USAGE

done
##
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script/script_examples$ ./cpu_monitor 1
0.5
0.5
0.5
0.5
0.5
0.5
0.5
##
#!/bin/bash

COUNTER=$1
COUNTER=$((COUNTER * 10 ))

mineen(){
        COUNTER=$(( COUNTER - 1 ))
        sleep 1
}

while [ $COUNTER -gt 0 ]
do
        echo you still have $COUNTER seconds
        mineen
done

[ $COUNTER = 0 ] && echo out of time && mineen
[ $COUNTER = "-1" ] && echo you are one second late && mineen

while true
do
        echo you are ${COUNTER#*-} seconds late
        mineen
done

##
litepoint@litepoint-Latitude-E6440:~/Desktop/Shell_script/script_examples$ ./counter_ex 1
you still have 10 seconds
you still have 9 seconds
you still have 8 seconds
you still have 7 seconds
you still have 6 seconds
you still have 5 seconds
you still have 4 seconds
you still have 3 seconds
you still have 2 seconds
you still have 1 seconds
out of time
you are one second late
you are 2 seconds late
you are 3 seconds late
you are 4 seconds late
you are 5 seconds late
you are 6 seconds late
you are 7 seconds late
you are 8 seconds late
^C
## Process Monitor
#!/bin/bash

# Monitoring process

PROCESS=httpd

COUNTER=0
while ps aux | grep $PROCESS | grep -v grep > /dev/null
do
        COUNTER=$((COUNTER+1))
        sleep 1
        echo COUNTER is $COUNTER

done

logger PROCESSMONITOR: $PROCESS stpped at `date`
service $PROCESS start

##
litepoint@litepoint-e6440:~$ type pwd
pwd is a shell builtin
litepoint@litepoint-e6440:~$ which pwd
/bin/pwd

## shell is command line interpreter, takes keyboard commands and passes them to 
## OS to carry out
## to use GUI, it needs another program, called terminal emulator to interact with shell.

##
litepoint@litepoint-e6440:~$
username@machinename:currentDir$
## if the $ (shell prompt) is replaced as #, it is in the superuser privilege.

### 




















